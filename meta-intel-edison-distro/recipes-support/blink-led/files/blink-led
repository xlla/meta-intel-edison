#!/usr/bin/env python3

#
# Edison LED blinker
#
# Copyright (c) 2014, Intel Corporation.
# Fabien Chereau <fabien.chereau@intel.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# This is a very poor implementation as it uses subprocesses for init

import subprocess
import time
import argparse
import signal
import sys
import os
import gpiod

initial_led_state = "high"

def write_led(value):
    if value == "high":
        level = 1
    else:
        level = 0
    led.set_value(level)

def blink_once():
    write_led("low")
    time.sleep(1./args.frequency*args.duty_cycle)
    write_led("high")
    time.sleep(1./args.frequency*(1.-args.duty_cycle))

def deinit_led_gpio():
    # Revert to default state with LED activated
    write_led(initial_led_state)

    # Deinit LED GPIO
    led.release()
 
def signal_term_handler(signal, frame):
    print("Signal intercepted: de-initing LED GPIOs")
    deinit_led_gpio()
    sys.exit(0)

def set_line(name, value):
    line = gpiod.find_line(name)
    line.request(consumer=line.owner().name(), type=gpiod.LINE_REQ_DIR_OUT)
    line.set_value(value)
    line.release()

parser = argparse.ArgumentParser(description="Blink the Edison Arduino board LED.")
parser.add_argument("--frequency", type=float, default=4, help="blink frequency in Hz")
parser.add_argument("--duration",  type=float, default=-1, help="duration of the blink in seconds. Negative value means no timeout, i.e. it will stop when the program is killed.")
parser.add_argument("--duty_cycle",  type=float, default=0.5, help="duty cycle between 0 and 1")

args = parser.parse_args()

# Allows to quit cleanly with CRTL+C or SIGTERM (systemd use SIGTERM to kill a service by default)
signal.signal(signal.SIGTERM, signal_term_handler)
signal.signal(signal.SIGINT, signal_term_handler)

#D13 is used by oled
set_line("TRI_STATE_ALL", 0)
set_line("MUX19_DIR", 1)
set_line("TRI_STATE_ALL", 1)
led = gpiod.Chip("gpiochip0").get_line(182)
led.request(consumer=led.owner().name(), type=gpiod.LINE_REQ_DIR_OUT)
#when stop , we expected off
if led.get_value() == 0:
    initial_led_state = "low"
#else:
#    initial_led_state = "high"

# Blink LED
if args.duration >= 0:
    for i in range(0, int(args.duration*args.frequency)):
        blink_once()
else:
    while True:
        blink_once()

deinit_led_gpio()

